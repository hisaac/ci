---
# We have to run "softwareupdate" twice to ensure that all updates are applied.
- name: Perform the first "softwareupdate" invocation
  ansible.builtin.include_tasks: softwareupdate.yml
- name: Perform the second "softwareupdate" invocation
  ansible.builtin.include_tasks: softwareupdate.yml

- name: "Ensure no more software updates available: Check for available updates"
  ansible.builtin.command: "softwareupdate --all --list"
  changed_when: false

- name: "Ensure no more software updates available: Parse available updates"
  ansible.builtin.set_fact:
    software_updates: >-
      {{
        software_updates_result.stdout
        | regex_findall(
            '\\* Label: (.*)\\n\\tTitle: (.*), Version: (.*), Size: (.*), Recommended: (.*), Action: (.*), .*'
          )
        | map('zip', ['label', 'title', 'version', 'size', 'recommended', 'action'])
        | map('map', 'reverse')
        | map('community.general.dict')
      }}

- name: "Ensure no more software updates available: Print available updates"
  ansible.builtin.debug:
    var: software_updates

- name: "Ensure no more software updates available: Fail if some updates were not installed"
  ansible.builtin.fail:
    msg: "Found unapplied update: {{ item.label }}"
  loop: "{{ software_updates }}"
  when: "not item.label.startswith('macOS') or item.version.split('.')[0] == ansible_facts['distribution_version'].split('.')[0]"
