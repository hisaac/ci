---
- name: Check for available updates
  ansible.builtin.command: "softwareupdate --all --list"
  register: software_updates_results
  changed_when: false

- name: Parse available updates
  ansible.builtin.set_fact:
    software_updates: >-
      {{
        software_updates_result.stdout
        | regex_findall(
            '\\* Label: (.*)\\n\\tTitle: (.*), Version: (.*), Size: (.*), Recommended: (.*), Action: (.*), .*'
          )
        | map('zip', ['label', 'title', 'version', 'size', 'recommended', 'action'])
        | map('map', 'reverse')
        | map('community.general.dict')
      }}

- name: Print available updates
  ansible.builtin.debug:
    var: software_updates

- name: Install available updates
  ansible.builtin.command:
    cmd: "softwareupdate --install --agree-to-license --force --restart --user admin --stdinpass {{ stdinpass | default('') }} '{{ item.label }}'"
    stdin: "{{ ansible_password }}"
  register: update_result
  changed_when: "'No updates are available.' not in update_result.stdout"
  # Work around the following:
  # > Data could not be sent to remote host [...].
  # > Make sure this host can be reached over ssh:
  # > ssh: connect to host [...] port 22: Connection refused.
  ignore_unreachable: true
  # Ignore SIGTERM/SIGKILL sent "softwareupdate" process
  # when the system reboots due to --restart and any other errors,
  # since we'll check whether the update was installed in main.yml
  # anyway.
  ignore_errors: true
  become: true
  loop: "{{ software_updates }}"
  when:
    - software_updates | length > 0
    - not item.label.startswith('macOS') or item.version.split('.')[0] == ansible_facts['distribution_version'].split('.')[0]
    - not ansible_check_mode

- name: Wait for connection
  ansible.builtin.wait_for_connection:
    delay: 60
    timeout: 1800
  when:
    update_result is defined and not update_result.skipped | default(false)
